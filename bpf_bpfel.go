// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	K___brForward             *ebpf.ProgramSpec `ebpf:"k___br_forward"`
	K___devQueueXmit          *ebpf.ProgramSpec `ebpf:"k___dev_queue_xmit"`
	K___kfreeSkb              *ebpf.ProgramSpec `ebpf:"k___kfree_skb"`
	K___neighEventSend        *ebpf.ProgramSpec `ebpf:"k___neigh_event_send"`
	K___netifReceiveSkb       *ebpf.ProgramSpec `ebpf:"k___netif_receive_skb"`
	K_arpSolicit              *ebpf.ProgramSpec `ebpf:"k_arp_solicit"`
	K_brForward               *ebpf.ProgramSpec `ebpf:"k_br_forward"`
	K_brForwardFinish         *ebpf.ProgramSpec `ebpf:"k_br_forward_finish"`
	K_brHandleFrameFinish     *ebpf.ProgramSpec `ebpf:"k_br_handle_frame_finish"`
	K_brNetifReceiveSkb       *ebpf.ProgramSpec `ebpf:"k_br_netif_receive_skb"`
	K_brNfDevQueueXmit        *ebpf.ProgramSpec `ebpf:"k_br_nf_dev_queue_xmit"`
	K_brNfForwardFinish       *ebpf.ProgramSpec `ebpf:"k_br_nf_forward_finish"`
	K_brNfForwardIp           *ebpf.ProgramSpec `ebpf:"k_br_nf_forward_ip"`
	K_brNfPostRouting         *ebpf.ProgramSpec `ebpf:"k_br_nf_post_routing"`
	K_brNfPreRouting          *ebpf.ProgramSpec `ebpf:"k_br_nf_pre_routing"`
	K_brNfPreRoutingFinish    *ebpf.ProgramSpec `ebpf:"k_br_nf_pre_routing_finish"`
	K_brPassFrameUp           *ebpf.ProgramSpec `ebpf:"k_br_pass_frame_up"`
	K_devHardStartXmit        *ebpf.ProgramSpec `ebpf:"k_dev_hard_start_xmit"`
	K_devQueueXmit            *ebpf.ProgramSpec `ebpf:"k_dev_queue_xmit"`
	K_icmpRcv                 *ebpf.ProgramSpec `ebpf:"k_icmp_rcv"`
	K_ipFinishOutput          *ebpf.ProgramSpec `ebpf:"k_ip_finish_output"`
	K_ipFinishOutput2         *ebpf.ProgramSpec `ebpf:"k_ip_finish_output2"`
	K_ipLocalDeliver          *ebpf.ProgramSpec `ebpf:"k_ip_local_deliver"`
	K_ipLocalOut              *ebpf.ProgramSpec `ebpf:"k_ip_local_out"`
	K_ipOutput                *ebpf.ProgramSpec `ebpf:"k_ip_output"`
	K_ipQueueXmit             *ebpf.ProgramSpec `ebpf:"k_ip_queue_xmit"`
	K_ipRcv                   *ebpf.ProgramSpec `ebpf:"k_ip_rcv"`
	K_ipRcvFinish             *ebpf.ProgramSpec `ebpf:"k_ip_rcv_finish"`
	K_ipSendSkb               *ebpf.ProgramSpec `ebpf:"k_ip_send_skb"`
	K_iptDoTable              *ebpf.ProgramSpec `ebpf:"k_ipt_do_table"`
	K_iptableFilterHook       *ebpf.ProgramSpec `ebpf:"k_iptable_filter_hook"`
	K_iptableMangleHook       *ebpf.ProgramSpec `ebpf:"k_iptable_mangle_hook"`
	K_iptableNatDoChain       *ebpf.ProgramSpec `ebpf:"k_iptable_nat_do_chain"`
	K_kfreeSkb                *ebpf.ProgramSpec `ebpf:"k_kfree_skb"`
	K_kfreeSkbReason          *ebpf.ProgramSpec `ebpf:"k_kfree_skb_reason"`
	K_kfreeSkbmem             *ebpf.ProgramSpec `ebpf:"k_kfree_skbmem"`
	K_loopbackXmit            *ebpf.ProgramSpec `ebpf:"k_loopback_xmit"`
	K_macvlanBroadcastEnqueue *ebpf.ProgramSpec `ebpf:"k_macvlan_broadcast_enqueue"`
	K_macvlanStartXmit        *ebpf.ProgramSpec `ebpf:"k_macvlan_start_xmit"`
	K_napiGroReceive          *ebpf.ProgramSpec `ebpf:"k_napi_gro_receive"`
	K_netifReceiveSkbCore     *ebpf.ProgramSpec `ebpf:"k_netif_receive_skb_core"`
	K_netifRx                 *ebpf.ProgramSpec `ebpf:"k_netif_rx"`
	K_nfHookSlow              *ebpf.ProgramSpec `ebpf:"k_nf_hook_slow"`
	K_nfLogTrace              *ebpf.ProgramSpec `ebpf:"k_nf_log_trace"`
	K_packetRcv               *ebpf.ProgramSpec `ebpf:"k_packet_rcv"`
	K_pingRcv                 *ebpf.ProgramSpec `ebpf:"k_ping_rcv"`
	K_pingV4Sendmsg           *ebpf.ProgramSpec `ebpf:"k_ping_v4_sendmsg"`
	K_skbFreeHead             *ebpf.ProgramSpec `ebpf:"k_skb_free_head"`
	K_skbVlanPop              *ebpf.ProgramSpec `ebpf:"k_skb_vlan_pop"`
	K_skbVlanPush             *ebpf.ProgramSpec `ebpf:"k_skb_vlan_push"`
	K_skbVlanUntag            *ebpf.ProgramSpec `ebpf:"k_skb_vlan_untag"`
	K_tpacketRcv              *ebpf.ProgramSpec `ebpf:"k_tpacket_rcv"`
	K_vlanDevHardStartXmit    *ebpf.ProgramSpec `ebpf:"k_vlan_dev_hard_start_xmit"`
	K_vlanDoReceive           *ebpf.ProgramSpec `ebpf:"k_vlan_do_receive"`
	KrIptDoTable              *ebpf.ProgramSpec `ebpf:"kr_ipt_do_table"`
	KrMacvlanStartXmit        *ebpf.ProgramSpec `ebpf:"kr_macvlan_start_xmit"`
	OldFuncK_iptDoTable       *ebpf.ProgramSpec `ebpf:"old_func_k_ipt_do_table"`
	OldK_iptDoTable           *ebpf.ProgramSpec `ebpf:"old_k_ipt_do_table"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	EventBuf      *ebpf.MapSpec `ebpf:"event_buf"`
	EventsRingbuf *ebpf.MapSpec `ebpf:"events_ringbuf"`
	SkbtracerIpt  *ebpf.MapSpec `ebpf:"skbtracer_ipt"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	EventBuf      *ebpf.Map `ebpf:"event_buf"`
	EventsRingbuf *ebpf.Map `ebpf:"events_ringbuf"`
	SkbtracerIpt  *ebpf.Map `ebpf:"skbtracer_ipt"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.EventBuf,
		m.EventsRingbuf,
		m.SkbtracerIpt,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	K___brForward             *ebpf.Program `ebpf:"k___br_forward"`
	K___devQueueXmit          *ebpf.Program `ebpf:"k___dev_queue_xmit"`
	K___kfreeSkb              *ebpf.Program `ebpf:"k___kfree_skb"`
	K___neighEventSend        *ebpf.Program `ebpf:"k___neigh_event_send"`
	K___netifReceiveSkb       *ebpf.Program `ebpf:"k___netif_receive_skb"`
	K_arpSolicit              *ebpf.Program `ebpf:"k_arp_solicit"`
	K_brForward               *ebpf.Program `ebpf:"k_br_forward"`
	K_brForwardFinish         *ebpf.Program `ebpf:"k_br_forward_finish"`
	K_brHandleFrameFinish     *ebpf.Program `ebpf:"k_br_handle_frame_finish"`
	K_brNetifReceiveSkb       *ebpf.Program `ebpf:"k_br_netif_receive_skb"`
	K_brNfDevQueueXmit        *ebpf.Program `ebpf:"k_br_nf_dev_queue_xmit"`
	K_brNfForwardFinish       *ebpf.Program `ebpf:"k_br_nf_forward_finish"`
	K_brNfForwardIp           *ebpf.Program `ebpf:"k_br_nf_forward_ip"`
	K_brNfPostRouting         *ebpf.Program `ebpf:"k_br_nf_post_routing"`
	K_brNfPreRouting          *ebpf.Program `ebpf:"k_br_nf_pre_routing"`
	K_brNfPreRoutingFinish    *ebpf.Program `ebpf:"k_br_nf_pre_routing_finish"`
	K_brPassFrameUp           *ebpf.Program `ebpf:"k_br_pass_frame_up"`
	K_devHardStartXmit        *ebpf.Program `ebpf:"k_dev_hard_start_xmit"`
	K_devQueueXmit            *ebpf.Program `ebpf:"k_dev_queue_xmit"`
	K_icmpRcv                 *ebpf.Program `ebpf:"k_icmp_rcv"`
	K_ipFinishOutput          *ebpf.Program `ebpf:"k_ip_finish_output"`
	K_ipFinishOutput2         *ebpf.Program `ebpf:"k_ip_finish_output2"`
	K_ipLocalDeliver          *ebpf.Program `ebpf:"k_ip_local_deliver"`
	K_ipLocalOut              *ebpf.Program `ebpf:"k_ip_local_out"`
	K_ipOutput                *ebpf.Program `ebpf:"k_ip_output"`
	K_ipQueueXmit             *ebpf.Program `ebpf:"k_ip_queue_xmit"`
	K_ipRcv                   *ebpf.Program `ebpf:"k_ip_rcv"`
	K_ipRcvFinish             *ebpf.Program `ebpf:"k_ip_rcv_finish"`
	K_ipSendSkb               *ebpf.Program `ebpf:"k_ip_send_skb"`
	K_iptDoTable              *ebpf.Program `ebpf:"k_ipt_do_table"`
	K_iptableFilterHook       *ebpf.Program `ebpf:"k_iptable_filter_hook"`
	K_iptableMangleHook       *ebpf.Program `ebpf:"k_iptable_mangle_hook"`
	K_iptableNatDoChain       *ebpf.Program `ebpf:"k_iptable_nat_do_chain"`
	K_kfreeSkb                *ebpf.Program `ebpf:"k_kfree_skb"`
	K_kfreeSkbReason          *ebpf.Program `ebpf:"k_kfree_skb_reason"`
	K_kfreeSkbmem             *ebpf.Program `ebpf:"k_kfree_skbmem"`
	K_loopbackXmit            *ebpf.Program `ebpf:"k_loopback_xmit"`
	K_macvlanBroadcastEnqueue *ebpf.Program `ebpf:"k_macvlan_broadcast_enqueue"`
	K_macvlanStartXmit        *ebpf.Program `ebpf:"k_macvlan_start_xmit"`
	K_napiGroReceive          *ebpf.Program `ebpf:"k_napi_gro_receive"`
	K_netifReceiveSkbCore     *ebpf.Program `ebpf:"k_netif_receive_skb_core"`
	K_netifRx                 *ebpf.Program `ebpf:"k_netif_rx"`
	K_nfHookSlow              *ebpf.Program `ebpf:"k_nf_hook_slow"`
	K_nfLogTrace              *ebpf.Program `ebpf:"k_nf_log_trace"`
	K_packetRcv               *ebpf.Program `ebpf:"k_packet_rcv"`
	K_pingRcv                 *ebpf.Program `ebpf:"k_ping_rcv"`
	K_pingV4Sendmsg           *ebpf.Program `ebpf:"k_ping_v4_sendmsg"`
	K_skbFreeHead             *ebpf.Program `ebpf:"k_skb_free_head"`
	K_skbVlanPop              *ebpf.Program `ebpf:"k_skb_vlan_pop"`
	K_skbVlanPush             *ebpf.Program `ebpf:"k_skb_vlan_push"`
	K_skbVlanUntag            *ebpf.Program `ebpf:"k_skb_vlan_untag"`
	K_tpacketRcv              *ebpf.Program `ebpf:"k_tpacket_rcv"`
	K_vlanDevHardStartXmit    *ebpf.Program `ebpf:"k_vlan_dev_hard_start_xmit"`
	K_vlanDoReceive           *ebpf.Program `ebpf:"k_vlan_do_receive"`
	KrIptDoTable              *ebpf.Program `ebpf:"kr_ipt_do_table"`
	KrMacvlanStartXmit        *ebpf.Program `ebpf:"kr_macvlan_start_xmit"`
	OldFuncK_iptDoTable       *ebpf.Program `ebpf:"old_func_k_ipt_do_table"`
	OldK_iptDoTable           *ebpf.Program `ebpf:"old_k_ipt_do_table"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.K___brForward,
		p.K___devQueueXmit,
		p.K___kfreeSkb,
		p.K___neighEventSend,
		p.K___netifReceiveSkb,
		p.K_arpSolicit,
		p.K_brForward,
		p.K_brForwardFinish,
		p.K_brHandleFrameFinish,
		p.K_brNetifReceiveSkb,
		p.K_brNfDevQueueXmit,
		p.K_brNfForwardFinish,
		p.K_brNfForwardIp,
		p.K_brNfPostRouting,
		p.K_brNfPreRouting,
		p.K_brNfPreRoutingFinish,
		p.K_brPassFrameUp,
		p.K_devHardStartXmit,
		p.K_devQueueXmit,
		p.K_icmpRcv,
		p.K_ipFinishOutput,
		p.K_ipFinishOutput2,
		p.K_ipLocalDeliver,
		p.K_ipLocalOut,
		p.K_ipOutput,
		p.K_ipQueueXmit,
		p.K_ipRcv,
		p.K_ipRcvFinish,
		p.K_ipSendSkb,
		p.K_iptDoTable,
		p.K_iptableFilterHook,
		p.K_iptableMangleHook,
		p.K_iptableNatDoChain,
		p.K_kfreeSkb,
		p.K_kfreeSkbReason,
		p.K_kfreeSkbmem,
		p.K_loopbackXmit,
		p.K_macvlanBroadcastEnqueue,
		p.K_macvlanStartXmit,
		p.K_napiGroReceive,
		p.K_netifReceiveSkbCore,
		p.K_netifRx,
		p.K_nfHookSlow,
		p.K_nfLogTrace,
		p.K_packetRcv,
		p.K_pingRcv,
		p.K_pingV4Sendmsg,
		p.K_skbFreeHead,
		p.K_skbVlanPop,
		p.K_skbVlanPush,
		p.K_skbVlanUntag,
		p.K_tpacketRcv,
		p.K_vlanDevHardStartXmit,
		p.K_vlanDoReceive,
		p.KrIptDoTable,
		p.KrMacvlanStartXmit,
		p.OldFuncK_iptDoTable,
		p.OldK_iptDoTable,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
